# -*- coding: utf-8 -*-
"""Copia de Copia de Copia de Mis proyectos python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yRfmkYQ3hop3YjMET24-SXwIYcCKLLWR

PROYECTO 1 "HISTORIAS LOCAS"
"""

# CONCATENAR CADENAS DE CARACTERES
# Supongamos que queremos crear una cuenta que diga:
# Aprende a programar con ____________.
# organización = "FreeCodeCamp"
# print("Aprende a programar con " + organización)
# print("Aprende a programar con {}".format(organización))
# print(f"Aprende a programar con {organización}") # f-string

# Mad Libs (Historias Locas)

adj = input("Ingrese un Adjetivo: ")
verbo1 = input("Ingrese un Verbo: ")
verbo2 = input("Ingrese otro Verbo: ")
sustantivo_plural = input("Ingrese un Sustantivo (plural): ")
madlib = f"!Programar es tan {adj}! Siempre me emociona porque me encanta {verbo1} problemas. !Aprende a {verbo2} con FreeCodeCamp y alcanza tus {sustantivo_plural}!"
print(madlib)

"""**Proyecto** #2 **Adivina el número.**"""

import random


def adivina_el_número(x):

    print("==============================")
    print(" !Bienvenido(a) al Juego! ")
    print("==============================")
    print("Tu meta es adivinar el número generado por la computadora.")

    número_aleatorio = random.randint(1, x) # Número aleatorio entre 1 y x.

    adivina = 0
    while adivina != número_aleatorio:
        # El usuario ingresa un número
        adivina = int(input(f"Adivina un número entre 1 y {x}: ")) # f-string

        if adivina < número_aleatorio:
            print("Intenta de nuevo. Este número es muy pequeño :v")
        elif adivina > número_aleatorio:
            print("Intenta de nuevo. Este número es muy grande :v")   

    print(f"!Felicitaciones! Adivinaste el número {número_aleatorio} correctamente :D ")  


adivina_el_número(15)

"""**Proyecto #3 Adivina el número (humano vs computadora >:3)**"""

import random


def adivina_el_número_computadora(x):

    print("==============================")
    print(" !Bienvenido(a) al Juego! ")
    print("==============================")
    print(f"Selecciona un número entre 1 y {x} para que la computadora intente adivinarlo....xd.....:v")

    límite_inferior = 1 # [1, x]
    límite_superior = x
    respuesta = ""
    while respuesta != "c":
        # Generar predicción
        if límite_inferior != límite_superior: # [1, 15]
            predicción = random.randint(límite_inferior, límite_superior)
        else:    
            predicción = límite_inferior # también podría ser el límite superior.

        # Obtener respuesta del usuario   
        respuesta = input(f"Mi predicción es {predicción} :). Si es muy alta, ingresa (A). Si es muy baja, ingresa (B). Si es correcta, ingresa (C): ").lower()

        if respuesta == "a":
            límite_superior = predicción - 1
        elif respuesta == "b":
            límite_inferior = predicción + 1

    print(f" Siii UWU!!! La computadora adivinó tu número correctamente :D el número era: {predicción} :)") 


adivina_el_número_computadora(15)               
            
            # Intervalo inicial: [1, 15]
            # Predicción: 6
            # Respuesta: "a"
            # Intervalo: [1, 5]

"""**Proyecto #4 Piedra, Papel o Tijera >:3**"""

import random


def jugar():
    usuario = input("Escoge una opción: 'pi' para piedra, 'pa' para papel, 'ti' para tijera :3.\n").lower()
    computadora = random.choice(['pi', 'pa', 'ti'])

    if usuario == computadora:
        return '!Empate :v!'

    if ganó_el_jugador(usuario, computadora):
        return '!Ganaste :D!'

    return '!Perdiste T-T!'


def ganó_el_jugador(jugador, oponente):
    # Retornar True (verdadero) si gana el jugador.
    # Piedra gana a Tijera (pi > ti).
    # Tijera gana a Papel (ti > pa).
    # Papel gana a Piedra (pa > pi).
    if ((jugador == 'pi' and oponente == 'ti')
        or (jugador == 'ti' and oponente == 'pa')
        or (jugador == 'pa' and oponente == 'pi')):
        return True
    else:
        return False


print(jugar())

"""**Proyecto #5 El Ahorcado >:3**"""

import random
import string

from palabras import palabras 
from ahorcado_diagramas import vidas_diccionario_visual


def obtener_palabra_válida(palabras):
    # seleccionamos al azar una palabra de esa lista con ramdom.
    palabra = random.choice(palabras)

    while '-' in palabras or ' ' in palabras:  
        palabra = random.choice(palabras)  

    return palabra.upper()        

def ahorcado():

    print("==========================================")
    print(" !Bienvenido(a) al Juego del Ahorcado :D! ")
    print("==========================================")

    palabra = obtener_palabra_válida(palabras)

    letras_por_adivinar = set(palabra)
    letras_adivinadas = set() # No {}
    abecedario = set(string.ascii_uppercase) # no tiene la ñ.

    vidas = 7

    while len(letras_por_adivinar) > 0 and vidas > 0:
        print(f"Te quedan {vidas} vidas y has usado estas letras:  {' '.join(letras_adivinadas)}")
        # H-LA sintaxis list comprehension
        # Mostrar estado actual de la palabra.
        palabra_lista = [letra if letra in letras_adivinadas
        else '-' for letra in palabra]
        # Mostrar estado del ahorcado
        print(vidas_diccionario_visual[vidas])
        # Mostrar las letras separadas por un espacio.
        print(f"Palabras:{' '.join(palabra_lista)}")

        letra_usuario = input("Escoge una letra: ").upper()
        # Si la letra escogida por el usuario está en el abecedario
        # y no está en el conjunto de letras que ya ingreso, se añade la letra
        # al conjunto de letras ingresadas.
        if letra_usuario in abecedario - letras_adivinadas:
            letras_adivinadas.add(letra_usuario)
           
            if letra_usuario in letras_por_adivinar:
                letras_por_adivinar.remove(letra_usuario)
                print('')
            else:
                vidas = vidas - 1 
                print(f"\nTu letra, {letra_usuario} no está en la palabra :/")
        # Si la letra escogida por el usuario ya fue ingresada.
        elif letra_usuario in letras_adivinadas:
            print("\Letra repetida, elige una nueva :v.")
        else:
            print("\nEsta letra no es válida :/")
    
    # El juego llega hasta esta línea al adivinar todas las letras
    # o cuando se agotan las vidas del jugador.
    if vidas == 0:
        print(vidas_diccionario_visual[vidas])
        print(f"!Ahorcado! Perdiste T-T. La palabra era: {palabra} :v")
    else:    
        print(f"!Excelente! !Adivinaste la palabra {palabra} :D!")


ahorcado()

"""**Proyecto # 6 Búsqueda Binaria >:3**"""

import random
import time


def búsqueda_ingenua(lista, objetivo):
    for i in range(len(lista)): # range (len(lista)) -> 0, 1, 2, 3,......., len(lista) -1 
        if lista [i] == objetivo:
            return i 
    return -1 

mi_lista = [1, 3, 5, 10, 12,] 
print(búsqueda_ingenua(mi_lista, 10))

import random
import time


def búsqueda_ingenua(lista, objetivo):
    for i in range(len(lista)): # range (len(lista)) -> 0, 1, 2, 3,......., len(lista) -1 
        if lista [i] == objetivo:
            return i 
    return -1 


def búsqueda_binaria(lista, objetivo, límite_inferior=None, límite_superior=None):
    if límite_inferior is None:
        límite_inferior = 0 # Inicio de la lista.
    if límite_superior is None:
        límite_superior = len(lista)-1 # Final de la lista.

    if límite_superior < límite_inferior:
        return -1

    punto_medio = (límite_inferior + límite_superior) // 2

    # [1, 3, 5, 10, 12]
    # 0   1  2   3  4
    # punto_medio = (0 + 4) // 2 = 4 // 2 = 2

    if lista[punto_medio] == objetivo:
        return punto_medio          
    elif objetivo < lista[punto_medio]:
        return búsqueda_binaria(lista, objetivo, límite_inferior, punto_medio-1)
    else:
        return búsqueda_binaria(lista, objetivo, punto_medio+1, límite_superior)


if __name__=='__main__':
    mi_lista = [1, 3, 5, 10, 12]
    print(búsqueda_binaria(mi_lista, 7))

import random
import time


def búsqueda_ingenua(lista, objetivo):
    for i in range(len(lista)): # range (len(lista)) -> 0, 1, 2, 3,......., len(lista) -1 
        if lista [i] == objetivo:
            return i 
    return -1 


def búsqueda_binaria(lista, objetivo, límite_inferior=None, límite_superior=None):
    if límite_inferior is None:
        límite_inferior = 0 # Inicio de la lista.
    if límite_superior is None:
        límite_superior = len(lista)-1 # Final de la lista.

    if límite_superior < límite_inferior:
        return -1

    punto_medio = (límite_inferior + límite_superior) // 2

    # [1, 3, 5, 10, 12]
    # 0   1  2   3  4
    # punto_medio = (0 + 4) // 2 = 4 // 2 = 2

    if lista[punto_medio] == objetivo:
        return punto_medio          
    elif objetivo < lista[punto_medio]:
        return búsqueda_binaria(lista, objetivo, límite_inferior, punto_medio-1)
    else:
        return búsqueda_binaria(lista, objetivo, punto_medio+1, límite_superior)


if __name__=='__main__':
    
    # Crear una lista ordenada con 100 números aleatorios.
    tamaño = 10000
    conjunto_inicial = set()

    while len(conjunto_inicial) < tamaño:
        conjunto_inicial.add(random.randint(-3*tamaño, 3*tamaño))

    lista_ordenada = sorted(list(conjunto_inicial))

    # Medir el tiempo de búsqueda ingenua.    
    inicio = time.time()
    for objetivo in lista_ordenada:
        búsqueda_ingenua(lista_ordenada, objetivo)
    fin = time.time() 
    print(f"Tiempo de búsqueda ingenua: {fin - inicio} segundos :v")  

    # Medir el tiempo de búsqueda binaria.
    inicio = time.time()
    for objetivo in lista_ordenada:
        búsqueda_binaria(lista_ordenada, objetivo)
    fin = time.time() 
    print(f"Tiempo de búsqueda binaria: {fin - inicio} segundos :v")